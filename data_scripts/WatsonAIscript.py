import pandas as pd
from glob import glob
from datetime import datetime

# List all CSV files generated by Mark's script
csv_files = glob('sacramento_conditions_2023_*.csv')

# Initialize an empty dictionary to store dataframes for each crop
crop_dfs = {}

# Function to get the start and end dates of a month
def get_month_date_range(year, month):
    start_date = datetime(year, month, 1).strftime('%Y-%m-%d')
    if month == 12:
        end_date = datetime(year + 1, 1, 1).strftime('%Y-%m-%d')
    else:
        end_date = datetime(year, month + 1, 1).strftime('%Y-%m-%d')
    return start_date, end_date

# Function to convert duration into quarters and map conditions to each quarter
def get_quarters_conditions(df, start_month, duration_months):
    quarters = []
    #divides the total duration by 3 and 
    num_quarters = (duration_months + 2) // 3  # Number of quarters (round up)
    
    for i in range(num_quarters):
        #this calculates the start and end months for the current quarter.
        quarter_start_month = (start_month + i * 3 - 1) % 12 + 1
        quarter_end_month = (start_month + (i + 1) * 3 - 1) % 12 + 1
        
        #this means the quarter is within a single calendar year.
        if quarter_start_month < quarter_end_month:
            quarter_df = df[(df['Month'] >= quarter_start_month) & (df['Month'] < quarter_end_month)]
        #quarter spans the end of one year and moves to the beginning of the next.
        else:
            quarter_df = df[(df['Month'] >= quarter_start_month) | (df['Month'] < quarter_end_month)]
        
        #this one means the way i have named it .the  conditions are averaged for the current quarter
        if not quarter_df.empty:
            avg_conditions = {
                'Quarter': f'Q{i + 1}',
                'Temperature': quarter_df['Temperature'].mean(),
                'Humidity': quarter_df['Humidity'].mean(),
                'WindSpeed': quarter_df['WindSpeed'].mean(),
                'Transpiration': quarter_df['Transpiration'].mean()
            }
            quarters.append(avg_conditions)
    return quarters

# Loop through each CSV file
for csv_file in csv_files:
    try:
        # Read the CSV file into a DataFrame
        df = pd.read_csv(csv_file)
        
        # Extract crop name and month from filename (assuming filename format is 'sacramento_conditions_2023_{crop}_{month}.csv')
        parts = csv_file.split('_')
        crop_name = parts[2]
        month = int(parts[3].split('.')[0])
        
        # Add Month column
        df['Month'] = month
        
        # Add DataFrame to dictionary, keyed by crop name
        if crop_name not in crop_dfs:
            crop_dfs[crop_name] = df
        else:
            crop_dfs[crop_name] = pd.concat([crop_dfs[crop_name], df], ignore_index=True)
        
        print(f"Processed data from {csv_file}")
    except FileNotFoundError:
        print(f"File {csv_file} not found")
        continue

# Extract crop-specific conditions and calculate average conditions by quarters
all_crops_quarters_conditions = []

for crop, df in crop_dfs.items():
    # Assuming the CSV contains 'start_month' and 'duration' columns for each crop
    start_month = df['start_month'].iloc[0]
    duration = df['duration'].iloc[0]

    quarters_conditions = get_quarters_conditions(df, start_month, duration)
    for quarter in quarters_conditions:
        quarter['Crop'] = crop
        all_crops_quarters_conditions.append(quarter)

# Convert the results to a DataFrame
quarters_conditions_df = pd.DataFrame(all_crops_quarters_conditions)

print("Average Climate Conditions by Crop and Quarter:")
print(quarters_conditions_df)

# Save the results to a CSV file
quarters_conditions_df.to_csv('average_climate_conditions_by_crop_and_quarter.csv', index=False)
print("Average climate conditions by crop and quarter saved to average_climate_conditions_by_crop_and_quarter.csv")
